# -*- coding: utf-8 -*-
"""Assignment4:User class

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ON1ll_9XGgskGpKK9Jpq9hZloxPGuPo
"""

import random
import re
import datetime

class User:
    def __init__(self, user_id, name, surname, birthday):
        self.user_id = user_id
        self.name = name
        self.surname = surname
        self.email = UserUtil.generate_email(name, surname, "example.com")
        self.password = UserUtil.generate_password()
        self.birthday = birthday

    def get_details(self):
        return f"ID: {self.user_id}, Name: {self.name} {self.surname}, Email: {self.email}, Birthday: {self.birthday}"

    def get_age(self):
        today = datetime.date.today()
        birth_date = self.birthday
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return age

class UserService:
    users = {}

    @classmethod
    def add_user(cls, user):
        cls.users[user.user_id] = user

    @classmethod
    def find_user(cls, user_id):
        return cls.users.get(user_id, None)

    @classmethod
    def delete_user(cls, user_id):
        if user_id in cls.users:
            del cls.users[user_id]

    @classmethod
    def update_user(cls, user_id, **user_update):
        user = cls.users.get(user_id)
        if user:
            for key, value in user_update.items():
                if hasattr(user, key):
                    setattr(user, key, value)

    @classmethod
    def get_number(cls):
        return len(cls.users)

class UserUtil:
    @staticmethod
    def generate_user_id():
        year_prefix = str(datetime.date.today().year)[2:]
        random_digits = ''.join(str(random.randint(0, 9)) for _ in range(7))
        return int(year_prefix + random_digits)

    @staticmethod
    def generate_password():
        import string
        characters = string.ascii_letters + string.digits + "!@#$%^&*()"
        while True:
            password = ''.join(random.choice(characters) for _ in range(8))
            if UserUtil.is_strong_password(password):
                return password

    @staticmethod
    def is_strong_password(password):
        return (
            len(password) >= 8 and
            any(c.isupper() for c in password) and
            any(c.islower() for c in password) and
            any(c.isdigit() for c in password) and
            any(c in "!@#$%^&*()" for c in password)
        )

    @staticmethod
    def generate_email(name, surname, domain):
        return f"{name.lower()}.{surname.lower()}@{domain}"

    @staticmethod
    def validate_email(email):
        pattern = r'^[a-z]+\.[a-z]+@[a-z]+\.[a-z]+$'
        return re.match(pattern, email) is not None